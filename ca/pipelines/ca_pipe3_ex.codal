/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use alu_operate;
    use memory_operation;
    use ex_output;

    semantics
    {
        
        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there is only one input which is the src1 register file, rf, value and
        // this input is from the ID pipeline register

       if((r_ex_rd == r_id_rs1) && (r_ex_rd !=0) && (r_ex_regwrite == true)){
            s_ex_fwd1 = DHF_ME;
       }
       else if((r_mem_rd == r_id_rs1) && (r_mem_rd !=0) && (r_mem_regwrite == true)){
            s_ex_fwd1 = DHF_WB;
       }
       else{
            s_ex_fwd1 = DHF_REG;
       }
       
       if((r_ex_rd == r_id_rs2) && (r_ex_rd !=0) && (r_ex_regwrite == true)){
            s_ex_fwd2 = DHF_ME;
       }
       else if((r_mem_rd == r_id_rs2) && (r_mem_rd !=0) && (r_mem_regwrite == true)){
            s_ex_fwd2 = DHF_WB;
       }
       else{
            s_ex_fwd2 = DHF_REG;
       }


        switch(s_ex_fwd1) {
            case DHF_ME:
                s_ex_fwd1_val = r_ex_alu_result;
                break;
            case DHF_WB:
                s_ex_fwd1_val = s_wb_data;
                break;
            case DHF_REG:
                s_ex_fwd1_val = r_id_rf_src1;
                break;
            default:
                s_ex_fwd1_val = 0;
                break;    
        }

        switch(s_ex_fwd2) {
            case DHF_ME:
                s_ex_fwd2_val = r_ex_alu_result;
                break;
            case DHF_WB:
                s_ex_fwd2_val = s_wb_data;
                break;
            case DHF_REG:
                s_ex_fwd2_val = r_id_rf_src2;
                break;
            default:
                s_ex_fwd2_val = 0;
                break;    
        }





        // Develop a multiplexer for the ALU src1 operand using a switch statement using the src1_sl
        // control signal provided by the ID pipeline register generated by the Instruction decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?
        //
        // In Assignment 5, there are two inputs to the source 2 operand mux, the src2 register, rf, value
        // and the immediate value.  Both of these inputs are from the ID pipeline register

        switch(r_id_src1_sl){
            case ALU_SRC1_SEL_RF:
               s_ex_src1_operand = s_ex_fwd1_val;
               break;
            case ALU_SRC1_SEL_PC:
               s_ex_src1_operand = r_id_pc;
               break;
            case ALU_SRC1_SEL_ZERO:
               s_ex_src1_operand = 0;
               break;
            default:
               s_ex_src1_operand = 0;
               break;
        }

        switch(r_id_src2_sl){
            case ALU_SRC2_SEL_RF:
               s_ex_src2_operand = s_ex_fwd2_val;
               break;
            case ALU_SRC2_SEL_IMM:
               s_ex_src2_operand = r_id_src2_imm;
               break;
            default:
               s_ex_src2_operand = 0;
               break;
        }


        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_id_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();
        memory_operation();






        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};



event alu_operate : pipeline(pipe.EX)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the ID pipeline register whose value is determined
        // by the instruction decoder.
        //
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to aluop to build the complete name of input from ID pipeline register for this switch
        // statement?
        //
        // The value to assign in the case statements was added to ca_resources.codal earlier in
        // assignment 5
       switch(r_id_aluop){
           case(ALU_NOP):
              s_ex_alu_result = (int32)0 ; //not so sure about this 
              break;
            case(ALU_ADD):
              s_ex_alu_result = (int32)(s_ex_src1_operand + s_ex_src2_operand);
              break;
            case(ALU_SUB):
              s_ex_alu_result = (int32)(s_ex_src1_operand - s_ex_src2_operand);
              break;
            case(ALU_SLL):
              s_ex_alu_result = ((uint32)s_ex_src1_operand << (uint5)s_ex_src2_operand);
              break;
            case(ALU_SLT):
              s_ex_alu_result = (((int32)s_ex_src1_operand < (int32)s_ex_src2_operand) ? true : false);
              break;
            case(ALU_SLTU):
              s_ex_alu_result = (((uint32)s_ex_src1_operand < (uint32)s_ex_src2_operand) ? true : false);
              break;
            case(ALU_XOR):
              s_ex_alu_result = (s_ex_src1_operand ^ s_ex_src2_operand);
              break;
            case(ALU_SRL):
              s_ex_alu_result = ((uint32)s_ex_src1_operand >> (uint5)s_ex_src2_operand);
              break;
            case(ALU_SRA):
              s_ex_alu_result = ((int32)s_ex_src1_operand >> (uint5)s_ex_src2_operand);
              break;
            case(ALU_OR):
              s_ex_alu_result = (s_ex_src1_operand | s_ex_src2_operand);
              break;
            case(ALU_AND):
              s_ex_alu_result = (s_ex_src1_operand & s_ex_src2_operand);
              break;
            default : 
              s_ex_alu_result = 0;
              break;
       }
       
        switch(r_id_jump_inst) {
            
            case BRADD_ADDR:
              s_ex_target_address = (r_id_pc + r_id_src2_imm);
              break;
            case BRADD_ALU:
              s_ex_target_address =  s_ex_alu_result;
              break;
            
            default:
              s_ex_target_address = 0;
              break;
        }

        
        
        if(s_ex_alu_result == 0){
            s_ex_zero = 1;
        }
        else{
            s_ex_zero = 0;
        }

       

        switch(r_id_rfwtsel) {
            case WB_ALU:
              s_ex_target_output = s_ex_alu_result;
              break;
            case WB_PC:
              s_ex_target_output = r_id_pc + 4;
              break;
            default:
              s_ex_target_output = 0;
              break;
        }





    };
};

event memory_operation : pipeline(pipe.EX)
{
    semantics
    {
        uint2 op_type;
        uint1 op_rw;

        switch(r_id_mem_ops){
            case MEM_NOP:
                 op_type = CP_AHB_IDLE;
                 op_rw = DONT_CARE;
                 s_ex_mem_size = 0;
                 break;
            case MEM_LB:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_READ;
                 s_ex_mem_size = CP_AHB_SIZE_8;
                 break;
            case MEM_LBU:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_READ;
                 s_ex_mem_size = CP_AHB_SIZE_8;
                 break;
            case MEM_LH:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_READ;
                 s_ex_mem_size = CP_AHB_SIZE_16;
                 break;
            case MEM_LHU:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_READ;
                 s_ex_mem_size = CP_AHB_SIZE_16;
                 break;
            case MEM_LW:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_READ;
                 s_ex_mem_size = CP_AHB_SIZE_32;
                 break;
            case MEM_SB:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_WRITE;
                 s_ex_mem_size = CP_AHB_SIZE_8;
                 break;
            case MEM_SH:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_WRITE;
                 s_ex_mem_size = CP_AHB_SIZE_16;
                 break;
            case MEM_SW:
                 op_type = CP_AHB_NONSEQ;
                 op_rw = CP_AHB_WRITE;
                 s_ex_mem_size = CP_AHB_SIZE_32;
                 break;
            default:
                //  codasip_fatal(ALU_ERROR, "ALU Immediate Decoder case: %d\n", r_id_mem_ops);
                 op_type = CP_AHB_IDLE;
                 op_rw = DONT_CARE;
                 s_ex_mem_size = 0;
                 break;
            
        }

        if(!s_me_take_branch){

           ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size);
           s_ex_wtdat = ldst.encode_data(s_ex_fwd2_val, s_ex_alu_result, s_ex_mem_size);

        }else{
           ldst.transport(CP_PHS_ADDRESS, CP_AHB_IDLE, op_rw, s_ex_alu_result, s_ex_mem_size);
           s_ex_wtdat = ldst.encode_data(s_ex_fwd2_val, s_ex_alu_result, s_ex_mem_size); 
        }
    };
};


event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        // Store the ALU result to the EX pipeline register
        // Use the pipeline register that you created earlier in Assignment 5 to pass the output
        // signal from the ALU switch statement from the alu_operate event
       // r_ex_alu_result = s_ex_alu_result;
        r_ex_alu_result = s_ex_target_output;

        // Passing control signals to the next stage, MEM, through the EX pipeline register.  These
        // instruction decoder signals are being passed from the ID pipeline to the EX pipeline.
        //
        // Assign the proper ID pipeline register to the following EX pipeline registers.
        r_ex_rd             = r_id_rd;
        r_ex_regwrite       = r_id_regwrite;

        r_ex_zero = s_ex_zero;

     
        r_ex_target_address = s_ex_target_address;

        r_ex_wtdat = s_ex_wtdat;

        r_ex_mem_size = s_ex_mem_size;

        



        // Passing Decoder control-signals to the EX stage
        r_ex_branch_inst = r_id_branch_inst;
        r_ex_jump_inst = r_id_jump_inst;
        r_ex_mem_ops = r_id_mem_ops;
        r_ex_memread = r_id_memread;
        r_ex_branch_op = r_id_branch_op;
    };
};

